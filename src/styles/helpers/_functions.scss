@use "sass:math";

/// Convert Hex to HSL color.
@function hex2hsl($colour) {
  @return unquote(
    'hsl(#{hue($colour)}, #{saturation($colour)}, #{lightness($colour)})'
  );
}

/// Convert Hex to HSLA color.
@function hex2hsla($colour, $opacity) {
  @return unquote(
    'hsla(#{hue($colour)}, #{saturation($colour)}, #{lightness($colour)}, #{$opacity})'
  );
}

/// Convert Hex to RGB color.
@function rgb($colour) {
  @return unquote('rgb(#{red($colour)}, #{green($colour)}, #{blue($colour)})');
}

/// Access CSS variables
@function v($name) {
  @return var(--#{$name});
}

/// Strip unit from number.
@function stripUnit($value) {
  @return math.div($value, ($value * 0 + 1));
}

/// Converts px to em.
@function em($pixels, $context: 16) {
  @if (unitless($pixels)) {
    $pixels: $pixels * 1px;
  }

  @if (unitless($context)) {
    $context: $context * 1px;
  }

  @return math.div($pixels, $context) * 1em;
}

// Convert px to rem
@function rem($pxValue) {
  @return #{math.div(stripUnit($pxValue), stripUnit(16px))}rem;
}

/// Converts px, em and percent.
@function convert($value, $currentUnit, $convertUnit) {
  @if $currentUnit==px {
    @if $convertUnit==em {
      @return math.div($value, 16+0em);
    } @else if $convertUnit==percent {
      @return percentage(math.div($value, 16));
    }
  } @else if $currentUnit==em {
    @if $convertUnit==px {
      @return $value * 16+0px;
    } @else if $convertUnit==percent {
      @return percentage($value);
    }
  } @else if $currentUnit==percent {
    @if $convertUnit==px {
      @return math.div($value * 16, 100+0px);
    } @else if $convertUnit==em {
      @return math.div($value, 100+0em);
    }
  } @else if $currentUnit==pts {
    @if $convertUnit==px {
      @return $value * 1.3333+0px;
    } @else if $convertUnit==em {
      @return math.div($value, 12+0em);
    } @else if $convertUnit==percent {
      @return percentage(math.div($value, 12));
    }
  }
}

// Get value from nested maps
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }
  @return $map;
}

// --------------------------------------------------------------------
// Retrieve Colors ----------------------------------------------------
// Usage: get-color(dark, 1) ------------------------------------------
// --------------------------------------------------------------------
@function get-colour($elem, $variant) {
  @return map-get(map-get($palette, $elem), $variant);
}

/// Retrieve colour from $colors map ie. `color(base, primary)`.
@function colour($colour-name, $colour-variant: null, $true-val: false) {
  // if we are returning the true colour value
  @if $true-val==true {
    // colour variant is optional
    @if ($colour-variant !=null) {
      // map inception, need two deep
      @return map-get(map-get($colours, $colour-name), $colour-variant);
    } @else {
      // single-level colour, one deep
      @return map-get($colours, $colour-name);
    }

    // if weâ€™re only returning the CSS4 variable
  } @else {
    // colour variant is optional
    @if ($colour-variant !=null) {
      // map inception, need two names
      @return var(--colour-#{$colour-name}-#{$colour-variant});
    } @else {
      // single-level colour, one name
      @return var(--colour-#{$colour-name});
    }
  }
}

/// Removes a specific item from a list.
/// @author Hugo Giraudel
/// @param {list} $list List.
/// @param {integer} $index Index.
/// @return {list} Updated list.
@function remove-nth($list, $index) {
  $result: null;

  @if type-of($index) !=number {
    @warn "$index: #{quote($index)} is not a number for `remove-nth`.";
  } @else if $index==0 {
    @warn "List index 0 must be a non-zero integer for `remove-nth`.";
  } @else if abs($index) >length($list) {
    @warn "List index is #{$index} but list is only #{length($list)} item long for `remove-nth`.";
  } @else {
    $result: ();
    $index: if($index < 0, length($list) + $index + 1, $index);

    @for $i from 1 through length($list) {
      @if $i !=$index {
        $result: append($result, nth($list, $i));
      }
    }
  }

  @return $result;
}

/// Replace `$search` with `$replace` in `$string`
/// @author Hugo Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  @if length($search) > 1 {
    @each $term in $search {
      $index: str-index($string, $term);
      @if $index {
        @return str-slice($string, 1, $index - 1) + $replace +
          str-replace(
            str-slice($string, $index + str-length($term)),
            $search,
            $replace
          );
      }
    }
  } @else {
    $index: str-index($string, $search);
    @if $index {
      @return str-slice($string, 1, $index - 1) + $replace +
        str-replace(
          str-slice($string, $index + str-length($search)),
          $search,
          $replace
        );
    }
  }

  @return $string;
}

/// Gets a value from a map.
/// @author Hugo Giraudel
/// @param {map} $map Map.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function val($map, $keys...) {
  @if nth($keys, 1) ==null {
    $keys: remove-nth($keys, 1);
  }

  @each $key in $keys {
    // If specified key is a list, add a sub list to get single values from map.
    // Else return map
    @if type-of($key) == 'list' {
      $map: nth(map-get($map, nth($key, 1)), nth($key, 2));
    } @else {
      $map: map-get($map, $key);
    }
  }

  @return $map;
}

/// Gets a heading value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _heading($keys...) {
  @return val($headings, $keys...);
}

/// Gets a colour value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _colour($keys...) {
  @return val($colours, $keys...);
}

/// Gets a colour value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _dark-colour($keys...) {
  @return val($dark-colours, $keys...);
}

/// Gets a colour value.
/// @param {string} $keys Key(s).
/// @return {string} Value.
@function _light-colour($keys...) {
  @return val($light-colours, $keys...);
}

/// Checks if a list does not contain any values.
///
/// @argument {list} $list
///   The list to check against.
///
/// @return {boolean}
///
/// @access private

@function _contains-falsy($list) {
  @each $item in $list {
    @if not $item {
      @return true;
    }
  }

  @return false;
}

/// Transforms shorthand to its shortest possible form.
///
/// @argument {list} $values
///   List of directional values.
///
/// @example scss
///   $values: _compact-shorthand(10px 20px 10px 20px);
///
///   // Output
///   $values: 10px 20px;
///
/// @return {list}
///
/// @access private

@function _compact-shorthand($values) {
  $output: null;

  $a: nth($values, 1);
  $b: if(length($values) < 2, $a, nth($values, 2));
  $c: if(length($values) < 3, $a, nth($values, 3));
  $d: if(length($values) < 2, $a, nth($values, if(length($values) < 4, 2, 4)));

  @if $a == 0 {
    $a: 0;
  }
  @if $b == 0 {
    $b: 0;
  }
  @if $c == 0 {
    $c: 0;
  }
  @if $d == 0 {
    $d: 0;
  }

  @if $a == $b and $a == $c and $a == $d {
    $output: $a;
  } @else if $a == $c and $b == $d {
    $output: $a $b;
  } @else if $b == $d {
    $output: $a $b $c;
  } @else {
    $output: $a $b $c $d;
  }

  @return $output;
}
