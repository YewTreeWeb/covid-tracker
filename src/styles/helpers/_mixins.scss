/// Vendor prefixes
@mixin prefix($property, $value, $vendors: webkit moz ms o, $default: true) {
  @if $vendors {
    @each $vendor in $vendors {
      #{"-" + $vendor + "-" + $property}: #{$value};
    }
  }

  @if $default {
    #{$property}: #{$value};
  }
}

/// Detect user agent.
@mixin browser($browsers: Mozilla Safari Opera Edge Firefox MSIE Chrome) {
  @each $browser in $browsers {
    html[data-browser*='#{$browser}'] & {
      @content;
    }
  }
}

/// Data tags.
@mixin data($tag, $data) {
  [data-#{$tag}*='#{$data}'] & {
    @content;
  }
}

// If only for dark mode
@mixin darkmode {
  [data-theme='dark'] & {
    @content;
  }
}

// Create font-face
@mixin font-face(
  $font-name,
  $file-name,
  $locals: (0, 0),
  $weight: 400,
  $style: normal,
  $display: swap,
  $fallback: false
) {
  @font-face {
    font-family: quote($font-name);
    font-weight: $weight;
    font-style: $style;
    font-display: $display;

    @if ($fallback) {
      src: url($file-name+'.eot');

      @if (nth($locals, 1) !=0 and nth($locals, 2) !=0) {
        src: local(quote(nth($locals, 1))), local(quote(nth($locals, 2))),
          url($file-name+'.eot?#iefix') format('embedded-opentype'),
          url($file-name+'.woff2') format('woff2'),
          url($file-name+'.woff') format('woff'),
          url($file-name+'.ttf') format('truetype'),
          url($file-name+'.svg##{$font-name}') format('svg');
      } @else {
        src: url($file-name+'.eot?#iefix') format('embedded-opentype'),
          url($file-name+'.woff2') format('woff2'),
          url($file-name+'.woff') format('woff'),
          url($file-name+'.ttf') format('truetype'),
          url($file-name+'.svg##{$font-name}') format('svg');
      }
    } @else {
      @if (nth($locals, 1) !=0 and nth($locals, 2) !=0) {
        src: local(quote(nth($locals, 1))), local(quote(nth($locals, 2))),
          url($file-name+'.woff2') format('woff2'),
          url($file-name+'.woff') format('woff');
      } @else {
        src: url($file-name+'.woff2') format('woff2'),
          url($file-name+'.woff') format('woff');
      }
    }
  }
}

/// Create fluid responsive sizes.
@mixin fluid($type, $min-size, $max-size, $min-vw, $max-vw) {
  #{$type}: #{$min-size};

  @media only screen and (min-width: #{$min-vw}) {
    #{$type}: calc(
      #{$min-size} + #{stripUnit($max-size - $min-size)} *
        ((100vw - #{$min-vw}) / #{stripUnit($max-vw - $min-vw)})
    );
  }

  @media only screen and (min-width: #{$max-vw}) {
    #{$type}: #{$max-size};
  }
}

/// Create placeholder.
@mixin placeholder {
  &.placeholder {
    @content;
  }

  &:-moz-placeholder {
    @content;
  }

  &::-moz-placeholder {
    @content;
  }

  &:-ms-input-placeholder {
    @content;
  }

  &::-webkit-input-placeholder {
    @content;
  }
}

/// Trigger hardware acceleration.
@mixin hardware($will-change: auto, $perspective: 1000) {
  backface-visibility: hidden;
  will-change: $will-change;
  perspective: $perspective;
}

/// Add retina media query.
@mixin retina($ratio) {
  @if map-has-key($ratios, #{'2x'}) or
    map-has-key($ratios, #{'1-2x'}) or
    map-has-key($ratios, #{'1-3x'}) or
    map-has-key($ratios, #{'1-5x'})
  {
    $ratio: map-get($ratios, $ratio);

    @media only screen and (-webkit-min-device-pixel-ratio: nth($ratio, 1)),
    only screen and (min--moz-device-pixel-ratio: nth($ratio, 1)),
    only screen and (-o-min-device-pixel-ratio: #{nth($ratio, 1)}/1),
    only screen and (min-device-pixel-ratio: nth($ratio, 1)),
    only screen and (min-resolution: #{nth($ratio, 2)}dpi),
    only screen and (min-resolution: #{nth($ratio, 1)}dppx) {
      @content;
    }
  } @else {
    @warn "There were no keys that match! Using default 2x ratio.";

    @media only screen and (-webkit-min-device-pixel-ratio: 2),
      only screen and (min--moz-device-pixel-ratio: 2),
      only screen and (-o-min-device-pixel-ratio: 2/1),
      only screen and (min-device-pixel-ratio: 2),
      only screen and (min-resolution: 192dpi),
      only screen and (min-resolution: 2dppx) {
      @content;
    }
  }
}

/// Adding Truncation.
@mixin truncate($truncation-boundary) {
  max-width: $truncation-boundary;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

/// Maintain aspect ratio.
@mixin aspect-ratio($width, $height) {
  position: relative;

  &::before {
    display: block;
    content: '';
    width: 100%;
    padding-top: ($height / $width) * 100%;
  }

  > .content {
    position: absolute;
    inset: 0;
  }

  @supports (aspect-ratio: 16 / 9) {
    aspect-ratio: $width / $height;

    &::before {
      content: none !important;
    }

    > .content {
      position: unset;
      inset: unset;
    }
  }
}

/// Builds directional properties by parsing CSS shorthand values. For example,
/// a value of `10px null` will output top and bottom directional properties,
/// but the `null` skips left and right from being output.
///
/// @argument {string} $property
///   Base property.
///
/// @argument {string} $suffix
///   Suffix to append. Use `null` to omit.
///
/// @argument {list} $values
///   List of values to set for the property.
///
/// @example scss
///   .element {
///     @include _directional-property(border, width, null 5px);
///   }
///
///   // CSS Output
///   .element {
///     border-right-width: 5px;
///     border-left-width: 5px;
///   }
///
/// @require {function} _compact-shorthand
///
/// @require {function} _contains-falsy
///
/// @access private

@mixin _directional-property($property, $suffix, $values) {
  $top: $property + '-top' + if($suffix, '-#{$suffix}', '');
  $bottom: $property + '-bottom' + if($suffix, '-#{$suffix}', '');
  $left: $property + '-left' + if($suffix, '-#{$suffix}', '');
  $right: $property + '-right' + if($suffix, '-#{$suffix}', '');
  $all: $property + if($suffix, '-#{$suffix}', '');

  $values: _compact-shorthand($values);

  @if _contains-falsy($values) {
    @if nth($values, 1) {
      #{$top}: nth($values, 1);
    }

    @if length($values) == 1 {
      @if nth($values, 1) {
        #{$right}: nth($values, 1);
      }
    } @else {
      @if nth($values, 2) {
        #{$right}: nth($values, 2);
      }
    }

    @if length($values) == 2 {
      @if nth($values, 1) {
        #{$bottom}: nth($values, 1);
      }
      @if nth($values, 2) {
        #{$left}: nth($values, 2);
      }
    } @else if length($values) == 3 {
      @if nth($values, 3) {
        #{$bottom}: nth($values, 3);
      }
      @if nth($values, 2) {
        #{$left}: nth($values, 2);
      }
    } @else if length($values) == 4 {
      @if nth($values, 3) {
        #{$bottom}: nth($values, 3);
      }
      @if nth($values, 4) {
        #{$left}: nth($values, 4);
      }
    }
  } @else {
    #{$all}: $values;
  }
}

// Set padding
@mixin padding($values) {
  @include _directional-property(padding, null, $values);
}

// Set margin
@mixin margin($values) {
  @include _directional-property(margin, null, $values);
}

/// Centering
@mixin center($horizontal: true, $vertical: true) {
  position: absolute;

  @if ($horizontal and $vertical) {
    inset: 50% 0 0;
    @include prefix(transform, translateY(-50%));
    margin: 0 auto;
  } @else if ($horizontal) {
    inset: 0;
    margin: 0 auto;
  } @else if ($vertical) {
    inset: 50% 0 0;
    @include prefix(transform, translateY(-50%));
  }
}

/// Clearfix
@mixin clearfix() {
  &::after {
    content: '';
    clear: both;
  }

  @supports (display: flow-root) {
    display: flow-root;
    &::after {
      content: unset;
      clear: unset;
    }
  }
}

// Sets the `max-width` and `max-height` of the element in one statement.
@mixin size($width, $height: $width, $type: null) {
  @if ($width !=null) {
    @if ($type== 'max' and $height !=0) {
      max-width: $width;
    } @else if ($type== 'min' and $height !=0) {
      min-width: $width;
    } @else {
      width: $width;
    }
  }

  @if ($height !=null) {
    @if ($type== 'max') {
      @if ($height == 'fill') {
        max-height: 100vh;
        max-height: -webkit-fill-available;
      } @else {
        max-height: $height;
      }
    } @else if ($type== 'min') {
      @if ($height == 'fill') {
        min-height: 100vh;
        min-height: -webkit-fill-available;
      } @else {
        min-height: $height;
      }
    } @else {
      @if ($height == 'fill') {
        height: 100vh;
        height: -webkit-fill-available;
      } @else {
        height: $height;
      }
    }
  }
}

/// Font settings
@mixin font($size: false, $family: false, $weight: false, $line: false) {
  @if ($size) {
    font-size: $size;
  }

  @if ($family) {
    font-family: $family;
  }

  @if ($weight) {
    font-weight: $weight;
  }

  @if ($line) {
    line-height: $line;
  }
}

// Utility function for mixin font-size
@mixin make-font-size($fs-font-size) {
  // If $fs-font-size is a list, include
  // both font-size and line-height
  @if type-of($fs-font-size) == 'list' {
    font-size: nth($fs-font-size, 1);

    @if (length($fs-font-size) > 1) {
      @if (nth($fs-font-size, 2) == 'null') {
        line-height: normal;
      } @else {
        line-height: nth($fs-font-size, 2);
      }

      @if (nth($fs-font-size, 3) == 'null') {
        letter-spacing: normal;
      } @else {
        letter-spacing: nth($fs-font-size, 3);
      }
    }
  } @else {
    font-size: $fs-font-size;
  }
}

/// Hover, Active, Focus.
@mixin call-to-action($hover: true, $active: true, $focus: true) {
  @if $hover and $active and $focus {
    @supports (hover: hover) {
      @media (hover: hover) {
        &:hover {
          @content;
        }
      }

      &:active,
      &:focus {
        @content;
      }
    }

    @supports not (hover: hover) {
      &:hover,
      &:active,
      &:focus {
        @content;
      }
    }
  } @else if $hover {
    @supports (hover: hover) {
      @media (hover: hover) {
        &:hover {
          @content;
        }
      }
    }

    @supports not (hover: hover) {
      &:hover {
        @content;
      }
    }
  } @else if $active {
    &:active {
      @content;
    }
  } @else if $focus {
    &:focus {
      @content;
    }
  } @else {
    @warn "A valid hover and/or active and/or focus is required.";
  }
}

/// Hover Detect
@mixin hover {
  @supports (hover: hover) {
    @media (hover: hover) {
      &:hover {
        @content;
      }
    }

    @media (hover: none) {
      &:focus,
      &:active {
        @content;
      }
    }
  }

  @supports not (hover: hover) {
    &:hover {
      @content;
    }
  }
}

/// Background Settings
@mixin background($size: cover, $position: center, $repeat: no-repeat) {
  background-repeat: $repeat;
  background-size: $size;
  background-position: $position;
}

/// Background Image
@mixin bgImg($image, $position, $mode: null, $darkImg: null, $sizes...) {
  /// Image formats to search for and replace
  $imgFormats: ('.jpg', '.jpeg', '.png');
  $imgNxtGenFormat: '.webp';

  // Add image
  background-image: url('/assets/images/#{$image}');
  background-image: url('/assets/images/#{str-replace($image, $imgFormats, $imgNxtGenFormat)}');

  // If theme uses darkmode
  @if $mode == 'dark' {
    @include darkmode {
      background-image: url('/assets/images/#{$darkImg}');
      background-image: url('/assets/images/#{str-replace($darkImg, $imgFormats, $imgNxtGenFormat)}');
    }
  } @else if $mode == 'responsive' or $mode == 'responsive-dark' {
    // If a responsive background image or responsive with a darkmode theme
    $breakpoint: null;
    $op: null;
    $media: null;

    @each $size in $sizes {
      // Determine operator, breakpoint.

      // Greater than or equal.
      @if (str-slice($size, 0, 2) == '>=') {
        $op: str-slice($size, 0, 2);
        $breakpoint: str-slice($size, 3);
      }

      // Less than or equal.
      @else if (str-slice($size, 0, 2) == '<=') {
        $op: str-slice($size, 0, 2);
        $breakpoint: str-slice($size, 3);
      }

      // Greater than.
      @else if (str-slice($size, 0, 1) == '>') {
        $op: str-slice($size, 0, 1);
        $breakpoint: str-slice($size, 2);
      }

      // Less than.
      @else if (str-slice($size, 0, 1) == '<') {
        $op: str-slice($size, 0, 1);
        $breakpoint: str-slice($size, 2);
      }

      // Not.
      @else if (str-slice($size, 0, 1) == '!') {
        $op: '<';
        $breakpoint: str-slice($size, 2);
      }

      // Equal.
      @else {
        $breakpoint: $size;
      }

      // Create an include media mixin valid string
      @if $op != null {
        $media: #{$op}#{$breakpoint};
      } @else {
        $media: $breakpoint;
      }

      // Create a valid responsive image filename
      $filename: str-replace($image, $imgFormats, '') + '_' + $breakpoint;
      @if mode == 'responsive-dark' {
        $filenameDark: str-replace($darkImg, $imgFormats, '') +
          '_' +
          $breakpoint;
      }

      @each $format in $imgFormats {
        $index: str-index($image, $format);
        @if $index {
          $filename: $filename + $format;
          @if mode == 'responsive-dark' {
            $filenameDark: $filenameDark + $format;
          }
        }
      }

      // Responsive image media query
      @include media('#{$media}px') {
        background-image: url('/assets/images/#{$filename}');
        background-image: url('/assets/images/#{str-replace(#{$filename}, $imgFormats, $imgNxtGenFormat)}');
        @if $mode == 'responsive-dark' {
          @include darkmode {
            background-image: url('/assets/images/#{$filenameDark}');
            background-image: url('/assets/images/#{str-replace(#{$filenameDark}, $imgFormats, $imgNxtGenFormat)}');
          }
        }
      }
    }
  }

  background-repeat: no-repeat;
  background-size: cover;
  @if $position {
    background-position: $position;
  } @else {
    background-position: center;
  }
}

/// Background Overlay
@mixin overlay($colour: black, $alpha: 0.3) {
  &::before {
    content: '';
    @include size(100%);
    background-color: rgba(_colour($colour), $alpha);
    background-color: hex2hsla(_colour($colour), $alpha);
    @include center;
  }
}

/// Display Flex
@mixin flex($align, $justify, $direction: false, $wrap: true) {
  display: flex;
  align-items: $align;

  // If space-evenly is used.
  @if $justify== 'space-evenly' {
    justify-content: space-between;

    // Use fallback for Edge.
    @supports (-ms-ime-align: auto) {
      &::before,
      &::after {
        content: '';
        display: block;
      }
    }

    // If not Edge then apply space-evenly.
    @supports not (-ms-ime-align: auto) {
      // Run space-evenly.
      justify-content: $justify;
    }
  } @else {
    // If other justify-content used.
    justify-content: $justify;
  }

  @if $direction {
    @if str-index($direction, 'row') {
      @if $wrap {
        flex-flow: $direction wrap;
      } @else {
        flex-direction: $direction;

        @include media('<=sm') {
          @if $direction== 'row' {
            flex-direction: column;
          } @else if $direction== 'row-reverse' {
            flex-direction: column-reverse;
          }
        }

        flex-wrap: nowrap;
      }
    } @else {
      flex-direction: $direction;
      flex-wrap: nowrap;
    }
  }
}

// Set the box shadow
@mixin shadow(
  $hoffset: 0,
  $voffset: 0,
  $blur: 0,
  $spread: 0,
  $colour: black,
  $animate: false
) {
  box-shadow: #{nth($hoffset, 1)}px #{nth($voffset, 1)}px #{nth($blur, 1)}px #{nth(
      $spread,
      1
    )}px $colour;
  @if $animate {
    &::before {
      content: '';
      @include size(100%);
      @if length($hoffset) ==
        2 and
        length($voffset) ==
        2 and
        length($blur) ==
        2 and
        length($spread) ==
        2
      {
        box-shadow: #{nth($hoffset, 2)}px
          #{nth($voffset, 2)}px
          #{nth($blur, 2)}px
          #{nth($spread, 2)}px
          $colour;
      }
    }
  }
}

// Set opacity
@mixin opacity($opacity, $fallback: false) {
  opacity: $opacity;
  @if fallback {
    $opacity-ie: $opacity * 100;
    filter: alpha(opacity = $opacity-ie); //IE8
  }
}
